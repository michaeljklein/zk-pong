{"debug_symbols":[{"locations":{"0":[{"span":{"start":1895,"end":2069},"file":0}],"1":[{"span":{"start":2108,"end":2285},"file":0}]}}],"file_map":{"0":{"source":"// Endgame circuit\n//\n// Kernel for certifying a game log once it's ended\n\nuse dep::std;\n\n// fn main(\n//     ping_type: pub Field, \n//     // These inputs are only used by the \n//     in_ball_x: i64,\n//     in_ball_y: i64,\n//     in_ball_dx: i64,\n//     in_ball_dy: i64,\n//     in_game_tick: i64,\n//     in_leftPaddle_x: i64,\n//     in_leftPaddle_y: i64,\n//     in_leftPaddle_dy: i64,\n//     in_leftPaddle_score: i64,\n//     in_rightPaddle_x: i64,\n//     in_rightPaddle_y: i64,\n//     in_rightPaddle_dy: i64,\n//     in_rightPaddle_score: i64,\n//     // TODO: we probably want a hash of all `in` and `out` state\n//     // This hash will be the public input we use rather than each of these values\n//\n//     out_ball_x: i64,\n//     out_ball_y: i64,\n//     out_ball_dx: i64,\n//     out_ball_dy: i64,\n//     out_game_tick: i64,\n//     out_leftPaddle_x: i64,\n//     out_leftPaddle_y: i64,\n//     out_leftPaddle_dy: i64,\n//     out_leftPaddle_score: i64,\n//     out_rightPaddle_x: i64,\n//     out_rightPaddle_y: i64,\n//     out_rightPaddle_dy: i64,\n//     out_rightPaddle_score: i64,\n//\n//     // TODO: also need a public finish game hash here\n//     out_leftPaddle_score: i64,\n//     out_leftPaddle_won: bool,\n//     out_rightPaddle_score: i64,\n//     out_rightPaddle_won: bool,\n//\n//     message: [u8;38],\n//     hashed_message: [u8;32],\n//     pub_key_x: [u8;32],\n//     pub_key_y: [u8;32],\n//     signature: [u8;64]\n// ) {\n\n// empty_ping: Field\n// in_state_hash: Field\n// out_state_hash: Field\n// user_id: Field\n// signature: [Field; 3] // eddsa posiedon\n//\n// [Field; 7]\n\nglobal MAX_PINGS = 256;\nglobal PUBLIC_INPUTS = 1792; // 7 * 256\n\nfn main(\n    verification_key : [Field; 114],\n    proof_a : [Field; 94],\n    proof_b : [Field; 94],\n    public_inputs : [Field; 2],\n    key_hash : Field,\n    input_aggregation_object : [Field; 16],\n) -> pub [Field; 16] {\n    let output_aggregation_object_a = std::verify_proof(\n        verification_key.as_slice(),\n        proof_a.as_slice(),\n        public_inputs.as_slice(),\n        key_hash,\n        input_aggregation_object\n    );\n\n    let output_aggregation_object = std::verify_proof(\n        verification_key.as_slice(),\n        proof_b.as_slice(),\n        public_inputs.as_slice(),\n        key_hash,\n        output_aggregation_object_a\n    );\n\n    let mut output = [0; 16];\n    for i in 0..16 {\n        output[i] = output_aggregation_object[i];\n    }\n    output\n}\n\n\n","path":"/Users/michaelklein/Coding/noir/zk-pong/endgame_circuit/src/main.nr"}},"warnings":[{"Warning":{"VerifyProof":{"call_stack":[{"span":{"start":1895,"end":2069},"file":0}]}}},{"Warning":{"VerifyProof":{"call_stack":[{"span":{"start":2108,"end":2285},"file":0}]}}}]}