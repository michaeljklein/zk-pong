{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":2150781435071863648,"abi":{"parameters":[{"name":"index","type":{"kind":"field"},"visibility":"private"},{"name":"game_log","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"pong::GameState","fields":[{"name":"ball_x","type":{"kind":"integer","sign":"signed","width":64}},{"name":"ball_y","type":{"kind":"integer","sign":"signed","width":64}},{"name":"ball_dx","type":{"kind":"integer","sign":"signed","width":64}},{"name":"ball_dy","type":{"kind":"integer","sign":"signed","width":64}},{"name":"game_tick","type":{"kind":"integer","sign":"signed","width":64}},{"name":"is_first_player","type":{"kind":"boolean"}},{"name":"leftPaddle_x","type":{"kind":"integer","sign":"signed","width":64}},{"name":"leftPaddle_y","type":{"kind":"integer","sign":"signed","width":64}},{"name":"leftPaddle_score","type":{"kind":"integer","sign":"signed","width":64}},{"name":"leftPaddle_won","type":{"kind":"boolean"}},{"name":"rightPaddle_x","type":{"kind":"integer","sign":"signed","width":64}},{"name":"rightPaddle_y","type":{"kind":"integer","sign":"signed","width":64}},{"name":"rightPaddle_score","type":{"kind":"integer","sign":"signed","width":64}},{"name":"rightPaddle_won","type":{"kind":"boolean"}}]}},"visibility":"private"},{"name":"game_moves","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"pong::GameMove","fields":[{"name":"leftPaddle_dy","type":{"kind":"integer","sign":"signed","width":64}},{"name":"rightPaddle_dy","type":{"kind":"integer","sign":"signed","width":64}}]}},"visibility":"private"},{"name":"signatures","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"Sig","fields":[{"name":"bytes","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}}]}},"visibility":"private"},{"name":"user_1","type":{"kind":"struct","path":"Pubkey","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user_2","type":{"kind":"struct","path":"Pubkey","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"game_log":[{"start":1,"end":141}],"game_moves":[{"start":141,"end":161}],"index":[{"start":0,"end":1}],"signatures":[{"start":161,"end":801}],"user_1":[{"start":801,"end":803}],"user_2":[{"start":803,"end":805}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"","file_map":{"16":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(_self: Self, _bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"24":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake3)]\npub fn blake3<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"39":{"source":"// Endgame circuit\n//\n// Kernel for certifying a game log once it's ended\n\nuse dep::std;\nuse dep::pong::{GameMove, GameState, init_pong, step_pong, final_step_pong, hash_game_state};\n\n\n// global MAX_PINGS = 256;\nglobal MAX_PINGS = 10;\n\nstruct Sig {\n  bytes: [u8; 64],\n}\n\n\nstruct Pubkey {\n  x: Field,\n  y: Field,\n}\n\nimpl Pubkey {\n  fn verify(self, sig: Sig, x: Field) {\n    let message_slice = x.to_le_radix(256, 32);\n    let mut message: [u8; 32] = [0; 32];\n    for i in 0..32 {\n        message[i] = message_slice[i];\n    }\n    // assert(std::ecdsa_secp256k1::verify_signature(self.x, self.y, sig.bytes, message));\n    assert(std::schnorr::verify_signature(self.x, self.y, sig.bytes, message));\n  }\n}\n\n\ntrait StepState<T> {\n  fn assert_initial_state(self);\n  fn assert_step(self, move: T, new_state: Self);\n  fn assert_final_state(self);\n  fn is_first_user(self) -> bool;\n  fn hash_to_field(self, move: T) -> Field;\n}\n\nimpl StepState<GameMove> for GameState {\n  fn assert_initial_state(self) {\n    init_pong(self)\n  }\n\n  fn assert_step(self, move: GameMove, new_state: Self) {\n    step_pong(self, move, new_state)\n  }\n\n  fn assert_final_state(self) {\n    final_step_pong(self)\n  }\n\n  fn is_first_user(self) -> bool {\n    self.is_first_player\n  }\n\n  fn hash_to_field(self, move: GameMove) -> Field {\n    hash_game_state(self, move)\n  }\n}\n\n\n// step kernel: (state_N, state_N', move_N', sig_N')\n// - state_N' = step(move_N', state_N)\n// - verify(p(N % 2), state_N', sig_N')\n//\n// if i == 0:\n//   // initialize\n//   old_state = initial_state\n//   new_state = game_log[i].0\n//   move      = game_log[i].1\n//   sig       = game_log[i].2\n// else:\n//   // step\n//   old_state = game_log[i].0\n//   new_state = game_log[i+1].0\n//   move      = game_log[i+1].1\n//   sig       = game_log[i+1].2\n//\n// step_kernel(old_state, new_state, move, sig)\n//\n// // finalize\n// if index + 1 == MAX_PINGS:\n//   finalize_kernel\n// end\nfn step_kernel<S, T>(\n  old_state: S,\n  new_state: S,\n  move: T,\n  index: Field,\n  sig: Sig,\n  user_1: Pubkey,\n  user_2: Pubkey,\n)\nwhere\n  S: StepState<T>\n{\n    // bootstrap with old_state = new_state = initial_state\n    if (index == 0) {\n        old_state.assert_initial_state();\n        new_state.assert_initial_state();\n    }\n\n    if (index + 1 == MAX_PINGS) {\n        new_state.assert_final_state();\n    }\n\n    // do this in state.assert_step()\n    // assert(old_state.is_first_user != new_state.is_first_user);\n    old_state.assert_step(move, new_state);\n\n    let current_user = if new_state.is_first_user() {\n        user_1\n    } else {\n        user_2\n    };\n    current_user.verify(sig, new_state.hash_to_field(move));\n}\n\nfn main(\n  index: Field,\n  game_log: [GameState; MAX_PINGS],\n  game_moves: [GameMove; MAX_PINGS],\n  signatures: [Sig; MAX_PINGS],\n  user_1: Pubkey,\n  user_2: Pubkey,\n) {\n  if (index == 0) {\n    assert(game_moves[0].leftPaddle_dy == game_moves[1].leftPaddle_dy);\n    assert(game_moves[0].rightPaddle_dy == game_moves[1].rightPaddle_dy);\n    assert(signatures[0].bytes == signatures[1].bytes);\n  }\n  step_kernel(\n    game_log[index], \n    game_log[index+1], \n    game_moves[index+1], \n    index,\n    signatures[index+1], \n    user_1,\n    user_2\n  )\n}\n\n","path":"/Users/michaelklein/Coding/noir/zk-pong/endgame_circuit/src/main.nr"},"40":{"source":"// Pong circuit\n//\n// Kernel for ensuring Pong game rules are valid for a particular state transition\n\nuse dep::std;\n\nstruct GameState {\n  ball_x: i64,\n  ball_y: i64,\n  ball_dx: i64,\n  ball_dy: i64,\n  game_tick: i64,\n  is_first_player: bool,\n  leftPaddle_x: i64,\n  leftPaddle_y: i64,\n  leftPaddle_score: i64,\n  leftPaddle_won: bool,\n  rightPaddle_x: i64,\n  rightPaddle_y: i64,\n  rightPaddle_score: i64,\n  rightPaddle_won: bool,\n}\n\nstruct GameMove {\n  leftPaddle_dy: i64,\n  rightPaddle_dy: i64,\n}\n\nimpl GameMove {\n  pub fn is_empty(self) {\n    assert(self.leftPaddle_dy == 0);\n    assert(self.rightPaddle_dy == 0);\n  }\n}\n\npub fn hash_game_state(state: GameState, move: GameMove) -> Field {\n  std::hash::pedersen_hash([\n    state.ball_x as Field,\n    state.ball_y as Field,\n    state.ball_dx as Field,\n    state.ball_dy as Field,\n    state.game_tick as Field,\n    state.is_first_player as Field,\n    state.leftPaddle_x as Field,\n    state.leftPaddle_y as Field,\n    state.leftPaddle_score as Field,\n    state.leftPaddle_won as Field,\n    state.rightPaddle_x as Field,\n    state.rightPaddle_y as Field,\n    state.rightPaddle_score as Field,\n    state.rightPaddle_won as Field,\n    move.leftPaddle_dy as Field,\n    move.rightPaddle_dy as Field,\n  ])\n}\n\n\n//////////////////////////////////////////\n// utils\n//////////////////////////////////////////\n\nfn signum(x: i64) -> i64 {\n  if (x < 0) {\n    -1\n  } else if (x == 0) {\n    0\n  } else {\n    1\n  }\n}\n\n//////////////////////////////////////////\n// end utils\n//////////////////////////////////////////\n\nglobal canvas_width: i64 = 750;\nglobal canvas_height: i64 = 585;\n\nglobal grid_size: i64 = 15;\nglobal paddleHeight: i64 = 80; // grid_size * 5;\nglobal maxPaddleY: i64 = 495; // canvas_height - grid_size - paddleHeight;\nglobal max_game_ticks: i64 = 128;\nglobal paddleSpeed: i64 = 6;\nglobal ballSpeed: i64 = 5;\n\nglobal canvas_width_half: i64 = 375; // == 750 // 2\nglobal canvas_height_half: i64 = 292; // == 585 // 2\nglobal paddleHeight_half: i64 = 40;\nglobal paddle_y0: i64 = 252; // canvas_height_half - paddleHeight_half;\n\n\nstruct GameObject {\n  x: i64,\n  y: i64,\n  width: i64,\n  height: i64,\n  dy: i64,\n}\n\n\n// // check for collision between two objects using axis-aligned bounding box (AABB)\n// // @see https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n// function collides(obj1, obj2) {\n//   return obj1.x < obj2.x + obj2.width &&\n//          obj1.x + obj1.width > obj2.x &&\n//          obj1.y < obj2.y + obj2.height &&\n//          obj1.y + obj1.height > obj2.y;\n// }\nfn collides(obj1: GameObject, obj2: GameObject) -> bool {\n  obj1.x < obj2.x + obj2.width &\n  obj1.x + obj1.width > obj2.x &\n  obj1.y < obj2.y + obj2.height &\n  obj1.y + obj1.height > obj2.y\n}\n\n\n// assert initial state valid\npub fn init_pong(state: GameState) {\n  let leftPaddle = GameObject {\n      x: grid_size * 2,\n      y: paddle_y0,\n      width: grid_size,\n      height: paddleHeight,\n      dy: 0,\n  };\n\n  let rightPaddle = GameObject {\n      x: canvas_width - grid_size * 3,\n      y: paddle_y0,\n      width: grid_size,\n      height: paddleHeight,\n      dy: 0,\n  };\n\n  let ball = GameObject {\n    x: canvas_width_half,\n    y: canvas_height_half,\n    width: grid_size,\n    height: grid_size,\n    dy: -ballSpeed,\n  };\n\n  let leftPaddle_won: bool = false;\n  let leftPaddle_score: i64 = 0;\n  let rightPaddle_score: i64 = 0;\n  let rightPaddle_won: bool = false;\n  let game_tick: i64 = 0;\n  let ball_dx: i64 = ballSpeed;\n\n  assert(ball.x            == state.ball_x,            \"unexpected initial tick: ball.x           \");\n  assert(ball.y            == state.ball_y,            \"unexpected initial tick: ball.y           \");\n  assert(ball_dx           == state.ball_dx,           \"unexpected initial tick: ball_dx          \");\n  assert(ball.dy           == state.ball_dy,           \"unexpected initial tick: ball.dy          \");\n  assert(game_tick         == state.game_tick,         \"unexpected initial tick: game_tick        \");\n  assert(leftPaddle.x      == state.leftPaddle_x,      \"unexpected initial tick: leftPaddle_x     \");\n  assert(leftPaddle.y      == state.leftPaddle_y,      \"unexpected initial tick: leftPaddle_y     \");\n  assert(leftPaddle_score  == state.leftPaddle_score,  \"unexpected initial tick: leftPaddle_score \");\n  assert(leftPaddle_won    == state.leftPaddle_won,    \"unexpected initial tick: leftPaddle_won   \");\n  assert(rightPaddle.x     == state.rightPaddle_x,     \"unexpected initial tick: rightPaddle_x    \");\n  assert(rightPaddle.y     == state.rightPaddle_y,     \"unexpected initial tick: rightPaddle_y    \");\n  assert(rightPaddle_score == state.rightPaddle_score, \"unexpected initial tick: rightPaddle_score\");\n  assert(rightPaddle_won   == state.rightPaddle_won,   \"unexpected initial tick: rightPaddle_won  \");\n  assert(                     state.is_first_player,   \"unexpected initial tick: is_first_player  \");\n  // assert(leftPaddle.dy     == state.leftPaddle_dy,     \"unexpected initial tick: leftPaddle_dy    \");\n  // assert(rightPaddle.dy    == state.rightPaddle_dy,    \"unexpected initial tick: rightPaddle_dy   \");\n}\n\n\n// validate state change on following i/o\n//\n// ball_x: i64\n// ball_y: i64\n// ball_dx: i64\n// ball_dy: i64\n// ball_tick: i64\n// leftPaddle_x: i64\n// leftPaddle_y: i64\n// leftPaddle_dy: i64\n// leftPaddle_score: i64\n// rightPaddle_x: i64\n// rightPaddle_y: i64\n// rightPaddle_dy: i64\n// rightPaddle_score: i64\npub fn step_pong(in_state: GameState, move: GameMove, out_state: GameState) {\n  let mut leftPaddle = GameObject {\n      x: in_state.leftPaddle_x,\n      y: in_state.leftPaddle_y,\n      width: grid_size,\n      height: paddleHeight,\n      dy: move.leftPaddle_dy,\n  };\n\n  let mut rightPaddle = GameObject {\n      x: in_state.rightPaddle_x,\n      y: in_state.rightPaddle_y,\n      width: grid_size,\n      height: paddleHeight,\n      dy: move.rightPaddle_dy,\n  };\n\n  let mut ball = GameObject {\n    x: in_state.ball_x,\n    y: in_state.ball_y,\n    width: grid_size,\n    height: grid_size,\n    dy: in_state.ball_dy,\n  };\n\n  let mut leftPaddle_score = in_state.leftPaddle_score;\n  let mut rightPaddle_score = in_state.rightPaddle_score;\n  let mut game_tick = in_state.game_tick;\n  let mut ball_dx = in_state.ball_dx;\n\n  // game active\n  assert(game_tick < max_game_ticks, \"game tick past end of game\");\n\n  // paddle velocity valid\n  assert((leftPaddle.dy == 0) | (leftPaddle.dy == -paddleSpeed) | (leftPaddle.dy == paddleSpeed));\n  assert((rightPaddle.dy == 0) | (rightPaddle.dy == -paddleSpeed) | (rightPaddle.dy == paddleSpeed));\n\n  // move paddles by their velocity\n  leftPaddle.y += leftPaddle.dy;\n  rightPaddle.y += rightPaddle.dy;\n\n  // prevent paddles from going through walls\n  if (leftPaddle.y < grid_size) {\n    leftPaddle.y = grid_size;\n  }\n  else if (leftPaddle.y > maxPaddleY) {\n    leftPaddle.y = maxPaddleY;\n  }\n  \n  if (rightPaddle.y < grid_size) {\n    rightPaddle.y = grid_size;\n  }\n  else if (rightPaddle.y > maxPaddleY) {\n    rightPaddle.y = maxPaddleY;\n  }\n\n  // move ball by its velocity\n  ball.x += ball_dx;\n  ball.y += ball.dy;\n\n  // prevent ball from going through walls by changing its velocity\n  if (ball.y < grid_size) {\n    ball.y = grid_size;\n    ball.dy *= -1;\n  }\n  else if (ball.y + grid_size > canvas_height - grid_size) {\n    ball.y = canvas_height - grid_size * 2;\n    ball.dy *= -1;\n  }\n\n  // points scored: reset ball if it goes past paddle\n  if (ball.x < 0 | ball.x > canvas_width) {\n  \n    if (ball.x < 0) {\n      rightPaddle_score += 1;\n    } else {\n      leftPaddle_score += 1;\n    }\n  \n    ball.x = canvas_width_half;\n    ball.y = canvas_height_half;\n  \n    // swap directions and reset speed\n    ball_dx = ballSpeed * signum(ball_dx) * -1;\n    ball.dy = -ballSpeed * signum(ball.dy) * -1;\n  }\n\n  // check to see if ball collides with paddle. if they do change x velocity\n  if (collides(ball, leftPaddle)) {\n    ball_dx *= -1;\n    ball_dx += signum(ball_dx);\n    ball.dy += signum(ball.dy);\n  \n    // move ball next to the paddle otherwise the collision will happen again\n    // in the next frame\n    ball.x = leftPaddle.x + leftPaddle.width;\n  }\n  else if (collides(ball, rightPaddle)) {\n    ball_dx *= -1;\n    ball_dx += signum(ball_dx);\n    ball.dy += signum(ball.dy);\n  \n    // move ball next to the paddle otherwise the collision will happen again\n    // in the next frame\n    ball.x = rightPaddle.x - ball.width;\n  }\n\n  game_tick += 1;\n  let is_first_player = !in_state.is_first_player;\n\n  assert(ball.x            == out_state.ball_x,            \"unexpected end of tick: ball.x           \");\n  assert(ball.y            == out_state.ball_y,            \"unexpected end of tick: ball.y           \");\n  assert(ball_dx           == out_state.ball_dx,           \"unexpected end of tick: ball_dx          \");\n  assert(ball.dy           == out_state.ball_dy,           \"unexpected end of tick: ball.dy          \");\n  assert(game_tick         == out_state.game_tick,         \"unexpected end of tick: game_tick        \");\n  assert(is_first_player   == out_state.is_first_player,   \"unexpected end of tick: is_first_player  \");\n  assert(leftPaddle.x      == out_state.leftPaddle_x,      \"unexpected end of tick: leftPaddle_x     \");\n  assert(leftPaddle.y      == out_state.leftPaddle_y,      \"unexpected end of tick: leftPaddle_y     \");\n  assert(leftPaddle_score  == out_state.leftPaddle_score,  \"unexpected end of tick: leftPaddle_score \");\n  assert(rightPaddle.x     == out_state.rightPaddle_x,     \"unexpected end of tick: rightPaddle_x    \");\n  assert(rightPaddle.y     == out_state.rightPaddle_y,     \"unexpected end of tick: rightPaddle_y    \");\n  assert(rightPaddle_score == out_state.rightPaddle_score, \"unexpected end of tick: rightPaddle_score\");\n  // assert(leftPaddle.dy     == out_state.leftPaddle_dy,     \"unexpected end of tick: leftPaddle_dy    \");\n  // assert(rightPaddle.dy    == out_state.rightPaddle_dy,    \"unexpected end of tick: rightPaddle_dy   \");\n}\n\n\n\n// end of game assertions\npub fn final_step_pong(state: GameState) {\n  if (max_game_ticks == state.game_tick) {\n    if (state.leftPaddle_score > state.rightPaddle_score) {\n      assert(state.leftPaddle_won);\n      assert(!state.rightPaddle_won);\n    } else if (state.rightPaddle_score > state.leftPaddle_score) {\n      assert(!state.leftPaddle_won);\n      assert(state.rightPaddle_won);\n    } else {\n      assert(!state.leftPaddle_won);\n      assert(!state.rightPaddle_won);\n    }\n  }\n}\n\n\n// fn main(x: Field, y: pub Field) {\n//\n//   let leftPaddle = GameObject {\n//       x: grid_size * 2,\n//       y: paddle_y0,\n//       width: grid_size,\n//       height: paddleHeight,\n//       dy: 0,\n//   };\n//\n//   let rightPaddle = GameObject {\n//       x: canvas_width - grid_size * 3,\n//       y: paddle_y0,\n//       width: grid_size,\n//       height: paddleHeight,\n//       dy: 0,\n//   };\n//\n//   let ball = GameObject {\n//     x: canvas_width_half,\n//     y: canvas_height_half,\n//     width: grid_size,\n//     height: grid_size,\n//     dy: -ballSpeed,\n//   };\n//\n//   let leftPaddle_score: i64 = 0;\n//   let rightPaddle_score: i64 = 0;\n//   let game_tick: i64 = 0;\n//   let ball_dx: i64 = ballSpeed;\n//\n//\n//   init_pong(\n//     ball.x,\n//     ball.y,\n//     ball_dx,\n//     ball.dy,\n//     game_tick,\n//     leftPaddle.x,\n//     leftPaddle.y,\n//     leftPaddle.dy,\n//     leftPaddle_score,\n//     rightPaddle.x,\n//     rightPaddle.y,\n//     rightPaddle.dy,\n//     rightPaddle_score,\n//   );\n//\n//   step_pong(\n//     ball.x,\n//     ball.y,\n//     ball_dx,\n//     ball.dy,\n//     game_tick,\n//     leftPaddle.x,\n//     leftPaddle.y,\n//     leftPaddle.dy,\n//     leftPaddle_score,\n//     rightPaddle.x,\n//     rightPaddle.y,\n//     rightPaddle.dy,\n//     rightPaddle_score,\n//\n//     ball.x + ball_dx,\n//     ball.y + ball.dy,\n//     ball_dx,\n//     ball.dy,\n//     game_tick + 1,\n//     leftPaddle.x,\n//     leftPaddle.y,\n//     leftPaddle.dy,\n//     leftPaddle_score,\n//     rightPaddle.x,\n//     rightPaddle.y,\n//     rightPaddle.dy,\n//     rightPaddle_score,\n//   );\n//\n//   final_step(\n//     max_game_ticks,\n//     leftPaddle_score,\n//     false, // out_leftPaddle_won\n//     rightPaddle_score,\n//     false, // out_rightPaddle_won\n//   );\n//\n//   assert(x != y);\n// }\n//\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n//\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n\n","path":"/Users/michaelklein/Coding/noir/zk-pong/pong_circuit/src/lib.nr"}}}